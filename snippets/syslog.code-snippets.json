{
	"Syslog line information": {
		"prefix": "syslog",
		"body": [
			"$3syslog(LOG_ERR, \"[euan] %s, %s, %s, %s, %d$1\", __DATE__, __TIME__, __FILE__, __FUNCTION__, __LINE__$2);"
		],
		"description": "Log line information to syslog"
	},

	"Kernel print message": {
		"prefix": "printk",
		"body": [
			"printk(KERN_ALERT \"DEBUG_MSG: %s, %s, %d$1\", __FILE__, __FUNCTION__, __LINE__$2);"
		],
		"description": "Log line information to dmesg.  Note using the __DATE__ and __TIME__ marcos requires -Wno-error=date-time in the top level makefile"
	},

	"Custom log line information": {
		"prefix": "log_err",
		"body": [
			"log_err(\"[euan] %s, %s, %s, %s, %d$1\", __DATE__, __TIME__, __FILE__, __FUNCTION__, __LINE__$2);"
		],
		"description": "Log line information to syslog"
	},

	"Python shebang": {
		"prefix": "pysh",
		"body": [
			"#!/usr/bin/env python3"
		],
		"description": "Python3 shebang to be placed at the top of python scripts"
	},

	"Bash shebang": {
		"prefix": "bash",
		"body": [
			"#!/usr/bin/env bash"
		],
		"description": "Bash shebang to be placed at the top of bash scripts"
	},

	"Python main": {
		"prefix": "pymain",
		"body": [
			"if __name__==\"__main__\":"
		],
		"description": "Python main function"
	},

	"Log date stamp": {
		"prefix": "datestamp",
		"body": [
			"${CURRENT_YEAR/(.*)\\d\\d/${1}/}${CURRENT_MONTH}${CURRENT_DATE}:"
		],
		"description": "Insert a date stamp in the form YYMMDD:"
	},

	"Backtrace function": {
		"prefix": "backtrace_function",
		"body": [
			"#include <execinfo.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <syslog.h>",
			"/* Obtain a backtrace and print it to stdout. */",
			"static void print_trace (void) {",
			"    void *array[10];",
			"    int size = backtrace (array, 10);",
			"    char **strings = backtrace_symbols (array, size);",
			"    if (strings != NULL) {",
			"        syslog(LOG_ERR, \"[euan][trace]: Obtained %d stack frames.\", size);",
			"        for (int i = 0; i < size; i++) {",
			"            syslog(LOG_ERR, \"[euan][trace]: frame: %d, function: %s\", i, strings[i]);",
			"        }",
			"    }",
			"    free (strings);",
			"}"
		],
		"description": "Function for creating a backtrace in c"
	},

	"Signal function": {
		"prefix": "signal_function",
		"body": [
			"#include <execinfo.h>",
			"#include <signal.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <syslog.h>",
			"/* Obtain a backtrace and print it to stdout. */",
			"static void print_signal_trace (int) {",
			"    void *array[10];",
			"    int size = backtrace (array, 10);",
			"    char **strings = backtrace_symbols (array, size);",
			"    if (strings != NULL) {",
			"        syslog(LOG_ERR, \"[euan][trace]: Obtained %d stack frames.\", size);",
			"        for (int i = 0; i < size; i++) {",
			"            syslog(LOG_ERR, \"[euan][trace]: frame: %d, function: %s\", i, strings[i]);",
			"        }",
			"    }",
			"    free (strings);",
			"}",
			"// Place this in main loop:",
			"//signal(SIGSEGV, print_signal_trace);"
		],
		"description": "Function for creating a backtrace on signal in c"
	},
	"Python arguments parser": {
		"prefix": "pyargs",
		"body": [
			"import argparse",
			"parser = argparse.ArgumentParser(prog='$1', description='$2')",
			"parser.add_argument('$3', type=$4str, help='$5')"
		],
		"descriptions": "Outline for python arguments"
	},
	"Editor config default": {
		"prefix": "editor_config",
		"body": [
			"# EditorConfig is awesome: https://EditorConfig.org",
			"",
			"# top-most EditorConfig file",
			"root = true",
			"",
			"# Unix-style newlines with a newline ending every file",
			"[*]",
			"end_of_line = lf",
			"insert_final_newline = true",
			"trim_trailing_whitespace = true",
			"insert_final_newline = true",
			"",
			"# Matches multiple files with brace expansion notation",
			"# Set default charset",
			"[*.{js,py}]",
			"charset = utf-8",
			"",
			"# 4 space indentation",
			"[*.py]",
			"indent_style = space",
			"indent_size = 4",
			"",
			"# Tab indentation (no size specified)",
			"[Makefile]",
			"indent_style = tab",
			"",
			"# Indentation override for all JS under lib directory",
			"[lib/**.js]",
			"indent_style = space",
			"indent_size = 2",
			"",
			"# Matches the exact files either package.json or .travis.yml",
			"[{package.json,.travis.yml}]",
			"indent_style = space",
			"indent_size = 2"
		],
		"description": "Default settings for the contents of an `.editorconfig` file"
	},
	"Time since start up": {
		"prefix": "uptime",
		"body": [
			"#include <iostream>",
			"#include <sys/sysinfo.h>",
			"",
			"long int get_uptime() {",
			"    struct sysinfo sys_info;",
			"    if(sysinfo(&sys_info) != 0){",
			"        return -1;",
			"    }",
			"    return sys_info.uptime;",
			"}"
		],
		"description": "Function for getting the uptime in seconds"
	}
}
